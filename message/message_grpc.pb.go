// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: message/message.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Messenger_ProcessMessage_FullMethodName       = "/message.Messenger/ProcessMessage"
	Messenger_GetProcessedMessages_FullMethodName = "/message.Messenger/GetProcessedMessages"
)

// MessengerClient is the client API for Messenger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessengerClient interface {
	ProcessMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageResponse, error)
	GetProcessedMessages(ctx context.Context, in *GetProcessedMessagesParams, opts ...grpc.CallOption) (Messenger_GetProcessedMessagesClient, error)
}

type messengerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessengerClient(cc grpc.ClientConnInterface) MessengerClient {
	return &messengerClient{cc}
}

func (c *messengerClient) ProcessMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, Messenger_ProcessMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messengerClient) GetProcessedMessages(ctx context.Context, in *GetProcessedMessagesParams, opts ...grpc.CallOption) (Messenger_GetProcessedMessagesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Messenger_ServiceDesc.Streams[0], Messenger_GetProcessedMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &messengerGetProcessedMessagesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Messenger_GetProcessedMessagesClient interface {
	Recv() (*ProcessedMessage, error)
	grpc.ClientStream
}

type messengerGetProcessedMessagesClient struct {
	grpc.ClientStream
}

func (x *messengerGetProcessedMessagesClient) Recv() (*ProcessedMessage, error) {
	m := new(ProcessedMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessengerServer is the server API for Messenger service.
// All implementations must embed UnimplementedMessengerServer
// for forward compatibility
type MessengerServer interface {
	ProcessMessage(context.Context, *Message) (*MessageResponse, error)
	GetProcessedMessages(*GetProcessedMessagesParams, Messenger_GetProcessedMessagesServer) error
	mustEmbedUnimplementedMessengerServer()
}

// UnimplementedMessengerServer must be embedded to have forward compatible implementations.
type UnimplementedMessengerServer struct {
}

func (UnimplementedMessengerServer) ProcessMessage(context.Context, *Message) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessMessage not implemented")
}
func (UnimplementedMessengerServer) GetProcessedMessages(*GetProcessedMessagesParams, Messenger_GetProcessedMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProcessedMessages not implemented")
}
func (UnimplementedMessengerServer) mustEmbedUnimplementedMessengerServer() {}

// UnsafeMessengerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessengerServer will
// result in compilation errors.
type UnsafeMessengerServer interface {
	mustEmbedUnimplementedMessengerServer()
}

func RegisterMessengerServer(s grpc.ServiceRegistrar, srv MessengerServer) {
	s.RegisterService(&Messenger_ServiceDesc, srv)
}

func _Messenger_ProcessMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerServer).ProcessMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Messenger_ProcessMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerServer).ProcessMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messenger_GetProcessedMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetProcessedMessagesParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessengerServer).GetProcessedMessages(m, &messengerGetProcessedMessagesServer{ServerStream: stream})
}

type Messenger_GetProcessedMessagesServer interface {
	Send(*ProcessedMessage) error
	grpc.ServerStream
}

type messengerGetProcessedMessagesServer struct {
	grpc.ServerStream
}

func (x *messengerGetProcessedMessagesServer) Send(m *ProcessedMessage) error {
	return x.ServerStream.SendMsg(m)
}

// Messenger_ServiceDesc is the grpc.ServiceDesc for Messenger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Messenger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.Messenger",
	HandlerType: (*MessengerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessMessage",
			Handler:    _Messenger_ProcessMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetProcessedMessages",
			Handler:       _Messenger_GetProcessedMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "message/message.proto",
}
